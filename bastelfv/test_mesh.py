import unittest
from dataclasses import dataclass
import torch as th


################################################################################
################################################################################
@dataclass(frozen=True)
class MockAirfoil:
    xNode: th.DoubleTensor = th.tensor([
        [1.0, 0.0],
        [0.7, -0.1],
        [0.4, -0.11],
        [0.2, -0.1],
        [0.0, 0.0],
        [0.2, 0.1],
        [0.4, 0.11],
        [0.7, 0.1],
        [1.0, 0.0],
    ], dtype=th.double)


################################################################################
################################################################################
@dataclass(frozen=True)
class MockQuadmesh:
    x_node: th.DoubleTensor = th.tensor([
        [0.0, 0.0], [1.0, 0.0], [2.0, 0.0], [3.0, 0.0], [4.0, 0.0],
        [0.0, 1.0], [1.0, 1.0], [2.0, 1.0], [3.0, 1.0], [4.0, 1.0],
        [0.0, 2.0], [1.0, 2.0], [2.0, 2.0], [3.0, 2.0], [4.0, 2.0],
        [0.0, 3.0], [1.0, 3.0], [2.0, 3.0], [3.0, 3.0], [4.0, 3.0],
    ], dtype=th.double)

    i_quad: th.IntTensor = th.tensor([
        [0, 1, 6, 5], [1, 2, 7, 6], [2, 3, 8, 7], [3, 4, 9, 8],
        [5, 6, 11, 10], [6, 7, 12, 11], [7, 8, 13, 12], [8, 9, 14, 13],
        [10, 11, 16, 15], [11, 12, 17, 16], [12, 13, 18, 17], [13, 14, 19, 18],
    ], dtype=th.int)

    x_centroid: th.DoubleTensor = th.tensor([
        [0.5, 0.5], [1.5, 0.5], [2.5, 0.5], [3.5, 0.5],
        [0.5, 1.5], [1.5, 1.5], [2.5, 1.5], [3.5, 1.5],
        [0.5, 2.5], [1.5, 2.5], [2.5, 2.5], [3.5, 2.5],
    ], dtype=th.double)

    elem_area: th.DoubleTensor = th.tensor([
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    ], dtype=th.double)

    i_neighb_node: th.IntTensor = th.tensor([
        [1, 5],
        [0, 2, 6],
        [1, 3, 7],
        [2, 4, 8],
        [3, 9],

        [0, 6, 10],
        [1, 5, 7, 11],
        [2, 6, 8, 12],
        [3, 7, 9, 13],
        [4, 8, 14],

        [5, 11, 15],
        [6, 10, 12, 16],
        [7, 11, 13, 17],
        [8, 12, 14, 18],
        [9, 13, 19],

        [10, 16],
        [11, 15, 17],
        [12, 16, 18],
        [13, 17, 19],
        [14, 18],
    ], dtype=th.int)

    i_elem_per_node: th.IntTensor = th.tensor([
        [0], [0, 1], [1, 2], [2, 3], [3],
        [0, 4], [0, 1, 4, 5], [1, 2, 5, 6], [2, 3, 6, 7], [3, 7],
        [4, 8], [4, 5, 8, 9], [5, 6, 9, 10], [6, 7, 10, 11], [7, 11],
        [8], [8, 9], [9, 10], [10, 11], [11]
    ], dtype=th.int)

    i_neighb_elem: th.IntTensor = th.tensor([
        [1, 4], [0, 2, 5], [1, 3, 6], [2, 7],
        [0, 5, 8], [1, 4, 6, 9], [2, 5, 7, 10], [3, 6, 11],
        [4, 9], [5, 8, 10], [6, 9, 11], [7, 10],
    ], dtype=th.int)

    i_bdry_face: th.IntTensor = th.tensor([
        [0, 1], [1, 2], [2, 3], [3, 4],
        [4, 9], [9, 14], [14, 19],
        [19, 18], [18, 17], [17, 16], [16, 15],
        [15, 10], [10, 5], [5, 0]
    ], dtype=th.int)

    bdry_marker: th.IntTensor = th.tensor(
        [0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3],
        dtype=th.int)


################################################################################
################################################################################
@dataclass(frozen=True)
class MockPrimaryMesh:
    xNode: th.DoubleTensor = th.tensor([
        # Layer 0
        [1.4, 0.0],
        [1.2, 0.0],
        [1.0, 0.0],
        [0.7, -0.1],
        [0.4, -0.11],
        [0.2, -0.1],
        [0.0, 0.0],
        [0.2, 0.1],
        [0.4, 0.11],
        [0.7, 0.1],
        [1.0, 0.0],
        # Layer 1
        [1.4, -0.2],
        [1.2, -0.2],
        [1.0, -0.2],
        [0.75, -0.25],
        [0.4, -0.25],
        [0.15, -0.2],
        [-0.2, 0.0],
        [0.15, 0.2],
        [0.4, 0.25],
        [0.75, 0.25],
        [1.0, 0.2],
        [1.2, 0.2],
        [1.4, 0.2],
        # Layer 3 (shorter)

    ])


################################################################################
################################################################################
class MyTestCase(unittest.TestCase):
    def test_something(self):
        self.assertEqual(True, False)  # add assertion here


################################################################################
################################################################################
if __name__ == '__main__':
    unittest.main()
